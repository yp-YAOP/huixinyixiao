/**
 * Ê∏∏ÊàèÊï∞ÊçÆ‰∏ä‰º†Âô® - ÈõÜÊàêÊÇ£ËÄÖÁÆ°ÁêÜÁ≥ªÁªü
 * Â§ÑÁêÜÊ∏∏ÊàèÊï∞ÊçÆÁöÑÂÆûÊó∂‰∏ä‰º†ÔºåÁ°Æ‰øùÊï∞ÊçÆÂêåÊ≠•Âà∞ÂåªÊä§Â∑•‰ΩúÁ´ô
 */

class GameDataUploader {
    constructor(gameType, patientId = null) {
        this.gameType = gameType;
        this.patientId = patientId;
        this.uploadInterval = null;
        this.lastUploadScore = 0;
        this.lastUploadTime = 0;
        this.gameStartTime = 0;
        this.isActive = false;
        
        // ÂàùÂßãÂåñÊó∂Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
        this.initializeUser();
    }

    // ÂàùÂßãÂåñÁî®Êà∑Áä∂ÊÄÅ
    initializeUser() {
        try {
            // Ê£ÄÊü•ÊòØÂê¶ÊúâÊÇ£ËÄÖÁÆ°ÁêÜÁ≥ªÁªü
            if (typeof PatientManager !== 'undefined') {
                const currentUser = PatientManager.getCurrentUser();
                if (currentUser && !this.patientId) {
                    this.patientId = currentUser.id;
                    console.log(`Ê∏∏ÊàèÊï∞ÊçÆ‰∏ä‰º†Âô®Â∑≤ÁªëÂÆöÂà∞ÊÇ£ËÄÖ: ${currentUser.name} (ID: ${currentUser.id})`);
                }
            } else {
                console.warn('ÊÇ£ËÄÖÁÆ°ÁêÜÁ≥ªÁªüÊú™Âä†ËΩΩÔºå‰ΩøÁî®‰º†ÂÖ•ÁöÑÊÇ£ËÄÖID:', this.patientId);
            }
        } catch (error) {
            console.error('ÂàùÂßãÂåñÁî®Êà∑Áä∂ÊÄÅÂ§±Ë¥•:', error);
        }
    }

    // ÂºÄÂßãÊ∏∏ÊàèÊï∞ÊçÆ‰∏ä‰º†
    startGame(currentScore = 0) {
        // ÂÜçÊ¨°Ê£ÄÊü•Áî®Êà∑Áä∂ÊÄÅÔºàÂèØËÉΩÂú®Ê∏∏ÊàèÂºÄÂßãÊó∂Áî®Êà∑Â∑≤ÁôªÂΩïÔºâ
        this.initializeUser();
        
        if (!this.patientId) {
            console.warn('Êú™ÊâæÂà∞ÊúâÊïàÁöÑÊÇ£ËÄÖIDÔºåÊï∞ÊçÆ‰∏ä‰º†ÂèØËÉΩÂ§±Ë¥•');
            return false;
        }

        this.gameStartTime = Date.now();
        this.lastUploadScore = currentScore;
        this.lastUploadTime = 0;
        this.isActive = true;

        // ÂºÄÂßãÂÆöÊúü‰∏ä‰º†ÔºàÊØè15ÁßíÔºâ
        this.uploadInterval = setInterval(() => {
            if (this.isActive) {
                this.periodicUpload();
            }
        }, 15000);

        console.log(`ÂºÄÂßã${this.getGameTypeName()}Êï∞ÊçÆ‰∏ä‰º†ÔºåÊÇ£ËÄÖID: ${this.patientId}`);
        return true;
    }

    // ÁªìÊùüÊ∏∏ÊàèÊï∞ÊçÆ‰∏ä‰º†
    endGame(finalScore) {
        this.isActive = false;
        
        if (this.uploadInterval) {
            clearInterval(this.uploadInterval);
            this.uploadInterval = null;
        }

        // ‰∏ä‰º†ÊúÄÁªàÊï∞ÊçÆ
        const finalTime = Math.floor((Date.now() - this.gameStartTime) / 1000);
        const scoreIncrease = finalScore - this.lastUploadScore;
        const timeIncrease = finalTime - this.lastUploadTime;

        this.uploadGameData({
            type: 'final',
            scoreIncrease: scoreIncrease,
            timeIncrease: timeIncrease,
            finalScore: finalScore,
            totalTime: finalTime
        });

        console.log(`ÁªìÊùü${this.getGameTypeName()}Êï∞ÊçÆ‰∏ä‰º†ÔºåÊúÄÁªàÂæóÂàÜ: ${finalScore}, ÊÄªÊó∂Èïø: ${finalTime}Áßí`);
    }

    // ÂÆöÊúü‰∏ä‰º†Êï∞ÊçÆ
    periodicUpload(currentScore = null) {
        if (!this.isActive || !this.patientId) return;

        const currentTime = Math.floor((Date.now() - this.gameStartTime) / 1000);
        const timeIncrease = currentTime - this.lastUploadTime;
        
        // Â¶ÇÊûúÊ≤°Êúâ‰º†ÂÖ•ÂΩìÂâçÂàÜÊï∞ÔºåÂ∞ùËØï‰ªéÊ∏∏ÊàèÁä∂ÊÄÅËé∑Âèñ
        if (currentScore === null) {
            currentScore = this.getCurrentGameScore();
        }
        
        const scoreIncrease = currentScore - this.lastUploadScore;

        // Âè™ÊúâÊó∂Èó¥ÊàñÂàÜÊï∞ÊúâÂèòÂåñÊó∂Êâç‰∏ä‰º†
        if (timeIncrease > 0 || scoreIncrease > 0) {
            this.uploadGameData({
                type: 'periodic',
                scoreIncrease: scoreIncrease,
                timeIncrease: timeIncrease,
                currentScore: currentScore,
                currentTime: currentTime
            });

            this.lastUploadScore = currentScore;
            this.lastUploadTime = currentTime;
        }
    }

    // ÊâãÂä®‰∏ä‰º†Êï∞ÊçÆÔºà‰æõÊ∏∏Êàè‰∏ªÂä®Ë∞ÉÁî®Ôºâ
    manualUpload(scoreIncrease, timeIncrease) {
        if (!this.isActive || !this.patientId) return;

        this.uploadGameData({
            type: 'manual',
            scoreIncrease: scoreIncrease,
            timeIncrease: timeIncrease,
            currentScore: this.lastUploadScore + scoreIncrease,
            currentTime: this.lastUploadTime + timeIncrease
        });

        this.lastUploadScore += scoreIncrease;
        this.lastUploadTime += timeIncrease;
    }

    // Ëé∑ÂèñÂΩìÂâçÊ∏∏ÊàèÂàÜÊï∞ÔºàÂ∞ùËØï‰ªéÂÖ®Â±ÄÊ∏∏ÊàèÁä∂ÊÄÅËé∑ÂèñÔºâ
    getCurrentGameScore() {
        try {
            // Â∞ùËØï‰ªé‰∏çÂêåÁöÑÂÖ®Â±ÄÂèòÈáèËé∑ÂèñÂàÜÊï∞
            if (typeof gameState !== 'undefined' && gameState.score !== undefined) {
                return gameState.score;
            }
            if (typeof score !== 'undefined') {
                return score;
            }
            if (typeof currentScore !== 'undefined') {
                return currentScore;
            }
            // ÈªòËÆ§ËøîÂõû‰∏äÊ¨°‰∏ä‰º†ÁöÑÂàÜÊï∞
            return this.lastUploadScore;
        } catch (error) {
            console.warn('Êó†Ê≥ïËé∑ÂèñÂΩìÂâçÊ∏∏ÊàèÂàÜÊï∞:', error);
            return this.lastUploadScore;
        }
    }

    // ‰∏ä‰º†Ê∏∏ÊàèÊï∞ÊçÆÂà∞Á≥ªÁªü
    uploadGameData(data) {
        try {
            // Ê£ÄÊü•ÊÇ£ËÄÖÁÆ°ÁêÜÁ≥ªÁªüÊòØÂê¶ÂèØÁî®
            if (typeof PatientManager !== 'undefined') {
                // ‰ΩøÁî®ÊÇ£ËÄÖÁÆ°ÁêÜÁ≥ªÁªüÊõ¥Êñ∞Ê∏∏ÊàèÊï∞ÊçÆ
                const success = PatientManager.updateGameData(
                    this.patientId,
                    this.gameType,
                    data.scoreIncrease || 0,
                    data.timeIncrease || 0
                );

                if (success) {
                    console.log(`Ê∏∏ÊàèÊï∞ÊçÆ‰∏ä‰º†ÊàêÂäü: ÂàÜÊï∞+${data.scoreIncrease}, Êó∂Èó¥+${data.timeIncrease}Áßí`);
                    
                    // ÊòæÁ§∫‰∏ä‰º†ÈÄöÁü•
                    this.showUploadNotification(data.scoreIncrease || 0, data.timeIncrease || 0);
                    
                    // Ëß¶ÂèëÊï∞ÊçÆÂêåÊ≠•‰∫ã‰ª∂
                    this.triggerDataSync(data);
                } else {
                    console.error('Ê∏∏ÊàèÊï∞ÊçÆ‰∏ä‰º†Â§±Ë¥•');
                }
            } else {
                // ‰ΩøÁî®localStorage‰Ωú‰∏∫Â§áÁî®ÊñπÊ°à
                this.uploadToLocalStorage(data);
            }
        } catch (error) {
            console.error('‰∏ä‰º†Ê∏∏ÊàèÊï∞ÊçÆÊó∂ÂèëÁîüÈîôËØØ:', error);
            // ‰ΩøÁî®localStorage‰Ωú‰∏∫Â§áÁî®ÊñπÊ°à
            this.uploadToLocalStorage(data);
        }
    }

    // Â§áÁî®ÁöÑlocalStorage‰∏ä‰º†ÊñπÊ≥ï
    uploadToLocalStorage(data) {
        try {
            const gameData = {
                patientId: this.patientId,
                gameType: this.gameType,
                scoreIncrease: data.scoreIncrease || 0,
                timeIncrease: data.timeIncrease || 0,
                timestamp: new Date().toISOString(),
                type: data.type || 'periodic'
            };

            // Â≠òÂÇ®Âà∞localStorage
            const existingData = JSON.parse(localStorage.getItem('gameUploads') || '[]');
            existingData.push(gameData);
            
            // Âè™‰øùÁïôÊúÄËøë100Êù°ËÆ∞ÂΩï
            if (existingData.length > 100) {
                existingData.splice(0, existingData.length - 100);
            }
            
            localStorage.setItem('gameUploads', JSON.stringify(existingData));
            localStorage.setItem('latestGameData', JSON.stringify(gameData));

            console.log('Ê∏∏ÊàèÊï∞ÊçÆÂ∑≤Â≠òÂÇ®Âà∞Êú¨Âú∞Â≠òÂÇ®');
            this.showUploadNotification(data.scoreIncrease || 0, data.timeIncrease || 0);
            
            // Ëß¶ÂèëÂ≠òÂÇ®‰∫ã‰ª∂
            window.dispatchEvent(new StorageEvent('storage', {
                key: 'latestGameData',
                newValue: JSON.stringify(gameData),
                storageArea: localStorage
            }));
        } catch (error) {
            console.error('Â≠òÂÇ®Ê∏∏ÊàèÊï∞ÊçÆÂà∞localStorageÂ§±Ë¥•:', error);
        }
    }

    // Ëß¶ÂèëÊï∞ÊçÆÂêåÊ≠•‰∫ã‰ª∂
    triggerDataSync(data) {
        try {
            // ÂàõÂª∫Ëá™ÂÆö‰πâ‰∫ã‰ª∂
            const syncEvent = new CustomEvent('gameDataSync', {
                detail: {
                    patientId: this.patientId,
                    gameType: this.gameType,
                    data: data,
                    timestamp: Date.now()
                }
            });
            
            window.dispatchEvent(syncEvent);
        } catch (error) {
            console.warn('Ëß¶ÂèëÊï∞ÊçÆÂêåÊ≠•‰∫ã‰ª∂Â§±Ë¥•:', error);
        }
    }

    // ÊòæÁ§∫‰∏ä‰º†ÈÄöÁü•
    showUploadNotification(scoreIncrease, timeIncrease) {
        try {
            // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
            const notification = document.createElement('div');
            notification.className = 'upload-notification';
            
            const gameTypeName = this.getGameTypeName();
            const scoreText = scoreIncrease > 0 ? `ÂæóÂàÜ+${scoreIncrease}` : '';
            const timeText = timeIncrease > 0 ? `Êó∂Èó¥+${timeIncrease}Áßí` : '';
            const separator = scoreText && timeText ? ', ' : '';
            
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-icon">üìä</span>
                    <span class="notification-text">${gameTypeName}: ${scoreText}${separator}${timeText}</span>
                </div>
            `;

            // Ê∑ªÂä†Ê†∑Âºè
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                padding: 12px 16px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                z-index: 10000;
                font-size: 14px;
                font-weight: 500;
                animation: slideInNotification 0.3s ease-out;
                max-width: 300px;
            `;

            // Ê∑ªÂä†Âä®Áîª
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideInNotification {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
            `;
            
            if (!document.querySelector('style[data-upload-notification]')) {
                style.setAttribute('data-upload-notification', 'true');
                document.head.appendChild(style);
            }

            // Ê∑ªÂä†Âà∞È°µÈù¢
            document.body.appendChild(notification);

            // 3ÁßíÂêéËá™Âä®ÁßªÈô§
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideInNotification 0.3s ease-out reverse';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, 3000);
        } catch (error) {
            console.warn('ÊòæÁ§∫‰∏ä‰º†ÈÄöÁü•Â§±Ë¥•:', error);
        }
    }

    // Ëé∑ÂèñÊ∏∏ÊàèÁ±ªÂûãÁöÑ‰∏≠ÊñáÂêçÁß∞
    getGameTypeName() {
        const gameNames = {
            'coordination': 'ÊâãÁúºÂçèË∞ÉËÆ≠ÁªÉ',
            'reaction': 'ÂèçÂ∫îÈÄüÂ∫¶ËÆ≠ÁªÉ',
            'cognitive': 'ËÆ§Áü•ËÉΩÂäõËÆ≠ÁªÉ',
            'hand': 'ÊâãÁúºÂçèË∞ÉËÆ≠ÁªÉ',  // ÂÖºÂÆπÊóßÁâàÊú¨
            'fruit': 'ÂèçÂ∫îÈÄüÂ∫¶ËÆ≠ÁªÉ', // ÂÖºÂÆπÊóßÁâàÊú¨
            'number': 'ËÆ§Áü•ËÉΩÂäõËÆ≠ÁªÉ' // ÂÖºÂÆπÊóßÁâàÊú¨
        };
        
        return gameNames[this.gameType] || this.gameType;
    }

    // Ëé∑ÂèñÊÇ£ËÄÖ‰ø°ÊÅØ
    getPatientInfo() {
        try {
            if (typeof PatientManager !== 'undefined' && this.patientId) {
                return PatientManager.getPatientById(this.patientId);
            }
        } catch (error) {
            console.warn('Ëé∑ÂèñÊÇ£ËÄÖ‰ø°ÊÅØÂ§±Ë¥•:', error);
        }
        return null;
    }

    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÂàùÂßãÂåñ
    isInitialized() {
        return this.patientId !== null && this.patientId !== undefined;
    }

    // ÂÅúÊ≠¢‰∏ä‰º†
    stop() {
        this.isActive = false;
        if (this.uploadInterval) {
            clearInterval(this.uploadInterval);
            this.uploadInterval = null;
        }
    }

    // ÈáçÂêØ‰∏ä‰º†
    restart() {
        this.stop();
        this.startGame(this.lastUploadScore);
    }
}

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æãÂ∑•ÂéÇÊñπÊ≥ï
window.createGameDataUploader = function(gameType, patientId = null) {
    return new GameDataUploader(gameType, patientId);
};

// ÂÖºÂÆπÊóßÁâàÊú¨ÁöÑÂÖ®Â±ÄÂÆû‰æã
if (typeof window !== 'undefined') {
    window.GameDataUploader = GameDataUploader;
}